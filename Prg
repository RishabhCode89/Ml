#include <stdio.h>
#include <string.h>   // for strlen
#include <mpi.h>      // for MPI functions

const int MAX_STRING = 100;

int main(void) {
    char greeting[MAX_STRING];
    int comm_sz;      // number of processes
    int my_rank;      // process rank (unique ID)

    MPI_Init(NULL, NULL);   // Initialize MPI execution environment
    MPI_Comm_size(MPI_COMM_WORLD, &comm_sz);   // Get number of processes
    MPI_Comm_rank(MPI_COMM_WORLD, &my_rank);   // Get my process rank

    if (my_rank != 0) {
        sprintf(greeting, "Greetings from process %d of %d!", my_rank, comm_sz);
        MPI_Send(greeting, strlen(greeting)+1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);
    } else {
        printf("Greetings from process %d of %d!\n", my_rank, comm_sz);

        for (int q = 1; q < comm_sz; q++) {
            MPI_Recv(greeting, MAX_STRING, MPI_CHAR, q, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            printf("%s\n", greeting);
        }
    }

    MPI_Finalize();   // Clean up MPI environment
    return 0;
}
